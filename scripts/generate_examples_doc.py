#!/usr/bin/env python3
# TInCuP - A library for generating and validating C++ customization point objects that use `tag_invoke`
#
# Copyright (c) National Technology & Engineering Solutions of Sandia,
# LLC (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
# Government retains certain rights in this software.
#
# Questions? Contact Greg von Winckel (gvonwin@sandia.gov)

"""
Generate examples documentation in docs/examples.md from JSON configuration.

This creates a standalone examples document with collapsible sections showing
generated CPO code from the JSON configuration in readme_examples.json.

Usage:
    python3 scripts/generate_examples_doc.py [--dry-run]
"""

import argparse
import json
import subprocess
import sys
from pathlib import Path
from typing import List, Dict, Any


def load_examples_config(config_path: Path) -> Dict[str, Any]:
    """Load examples configuration from JSON file."""
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        print(f"ERROR: Configuration file not found: {config_path}")
        sys.exit(1)
    except json.JSONDecodeError as e:
        print(f"ERROR: Invalid JSON in {config_path}: {e}")
        sys.exit(1)


def run_cpo_generator(command_args: List[str]) -> str:
    """Run the CPO generator with the given arguments and return the output."""
    try:
        full_cmd = ['python3', '-m', 'cpo_tools.cpo_generator'] + command_args
        
        result = subprocess.run(
            full_cmd,
            capture_output=True,
            text=True,
            timeout=30
        )
        
        if result.returncode != 0:
            print(f"ERROR: CPO generator failed with return code {result.returncode}")
            print(f"Command: {' '.join(full_cmd)}")
            print(f"STDERR: {result.stderr}")
            return f"// Error generating CPO: {result.stderr.strip()}"
        
        return result.stdout.strip()
        
    except subprocess.TimeoutExpired:
        print(f"ERROR: CPO generator timed out for command: {' '.join(full_cmd)}")
        return "// Error: CPO generation timed out"
    except Exception as e:
        print(f"ERROR: Failed to run CPO generator: {e}")
        return f"// Error: {e}"


def generate_example_section(example: Dict[str, Any]) -> str:
    """Generate a collapsible section for a single example."""
    name = example['name']
    description = example['description']
    command_args = example['command_args']
    usage_examples = example.get('usage_examples', [])
    
    section = f"""<details>
<summary><strong>{name}</strong> - {description}</summary>

**Generated CPO:**
```cpp"""
    
    # Generate CPO code for each command argument set
    for cmd_args in command_args:
        generated_code = run_cpo_generator([cmd_args])
        section += f"\n{generated_code}"
    
    section += "\n```"
    
    # Add usage examples if provided
    if usage_examples:
        usage_code = '\n'.join(usage_examples)
        section += f"""

**Usage:**
```cpp
{usage_code}
```"""
    
    section += "\n\n</details>"
    
    return section


def generate_examples_document(config: Dict[str, Any]) -> str:
    """Generate the complete examples documentation."""
    examples = sorted(config['examples'], key=lambda x: x.get('order', 0))
    
    document_parts = ["""# TInCuP Generated Examples

This document shows examples of CPOs generated by TInCuP from various configurations. Each example demonstrates different patterns and capabilities of the CPO generation system.

## Overview

These examples are automatically generated from JSON configurations using the TInCuP CPO generator. They showcase:

- **Generic CPOs**: Template-based customization points
- **Concrete CPOs**: Type-specific implementations  
- **Advanced Features**: Runtime dispatch, perfect forwarding, variadic arguments

## Generated Examples

"""]
    
    for example in examples:
        print(f"Generating example: {example['name']}")
        section = generate_example_section(example)
        document_parts.append(section)
        document_parts.append('')  # Add spacing between sections
    
    # Add footer from template if provided
    template = config.get('template', {})
    footer = template.get('section_footer', '')
    if footer:
        document_parts.append(footer)
    
    document_parts.append("""
## Integration with TInCuP

These generated CPOs integrate seamlessly with TInCuP's infrastructure:

- **Enhanced Diagnostics**: All generated CPOs include TInCuP's advanced error messages
- **Performance**: Zero-cost abstractions with compile-time dispatch
- **Extensibility**: Support for `tag_invoke` and `cpo_impl` customization
- **Type Safety**: Comprehensive template metaprogramming and concepts

## Usage in Projects

To use generated CPOs in your projects:

1. **Include TInCuP**: `#include <tincup/tincup.hpp>`
2. **Generate Your CPO**: Use the configurations shown above
3. **Implement tag_invoke**: Provide implementations for your types
4. **Enjoy Clean APIs**: Use the CPO throughout your codebase

For more information, see:
- [Main Documentation](../README.md)
- [User Guide](user_guide/)
- [Working Examples](../examples/)

## Note

This document is automatically generated from `scripts/readme_examples.json`. 
To update examples, modify the JSON configuration and run:

```bash
python3 scripts/generate_examples_doc.py
```
""")
    
    return '\n'.join(document_parts)


def main():
    parser = argparse.ArgumentParser(description='Generate examples documentation from JSON config')
    parser.add_argument('--dry-run', action='store_true', 
                       help='Print generated content without writing to file')
    parser.add_argument('--config', type=Path, 
                       default=Path('scripts/readme_examples.json'),
                       help='Path to examples configuration JSON')
    parser.add_argument('--output', type=Path,
                       default=Path('docs/examples.md'), 
                       help='Path to output markdown file')
    
    args = parser.parse_args()
    
    # Change to repository root
    repo_root = Path(__file__).parent.parent
    original_cwd = Path.cwd()
    
    try:
        import os
        os.chdir(repo_root)
        
        print(f"Loading examples configuration from {args.config}")
        config = load_examples_config(args.config)
        
        print("Generating examples documentation...")
        content = generate_examples_document(config)
        
        if args.dry_run:
            print("--- DRY RUN OUTPUT ---")
            print(content)
            print("--- END DRY RUN ---")
        else:
            # Ensure docs directory exists
            args.output.parent.mkdir(parents=True, exist_ok=True)
            
            print(f"Writing examples documentation to {args.output}")
            with open(args.output, 'w', encoding='utf-8') as f:
                f.write(content)
            
            print(f"Successfully generated {args.output}")
        
    finally:
        os.chdir(original_cwd)


if __name__ == '__main__':
    main()