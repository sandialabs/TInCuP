name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  python-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install quom
    
    - name: Run Python tests
      run: |
        make -f build_systems/make/Makefile test
    
    - name: Verify CPOs
      run: |
        make -f build_systems/make/Makefile verify-cpos

  single-header-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install quom
    
    - name: Generate single header
      run: |
        cd scripts && python generate_single_header.py
    
    - name: Test single header compilation
      run: |
        g++ -std=c++20 -Wall -Wextra -I. tests/test_single_header.cpp -o test_single_header
        ./test_single_header

  cmake-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        build_type: [Release, Debug]
        include:
          - os: windows-latest
            generator: "Visual Studio 17 2022"
          - os: ubuntu-latest
            generator: "Unix Makefiles"
          - os: macos-latest
            generator: "Unix Makefiles"
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python (for single header generation)
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install quom
    
    - name: Setup CMake (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # Remove conflicting cmake if present
        brew uninstall cmake || true
        brew install cmake
    
    - name: Generate single header
      run: |
        cd scripts && python generate_single_header.py
    
    - name: Configure CMake
      run: |
        cmake -B build -G "${{ matrix.generator }}" -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DTINCUP_BUILD_TESTS=ON
    
    - name: Build
      run: |
        cmake --build build --config ${{ matrix.build_type }}
    
    - name: Test
      run: |
        cd build && ctest --output-on-failure -C ${{ matrix.build_type }}

  meson-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install quom meson ninja
    
    - name: Setup Meson (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install ninja
    
    - name: Setup Meson (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y ninja-build
    
    - name: Setup Meson (macOS)  
      if: matrix.os == 'macos-latest'
      run: |
        brew install ninja
    
    - name: Generate single header
      run: |
        cd scripts && python generate_single_header.py
    
    - name: Setup build directory
      run: |
        # Point Meson at the actual source dir
        meson setup build build_systems/meson -Denable_examples=true
    
    - name: Build
      run: |
        meson compile -C build
    
    - name: Test
      run: |
        meson test -C build --verbose

  msvc-mingw-tests:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        toolchain: [msvc, mingw]
        include:
          - toolchain: msvc
            generator: "Visual Studio 17 2022"
          - toolchain: mingw
            generator: "Ninja"
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install quom
    
    - name: Setup MinGW
      if: matrix.toolchain == 'mingw'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        install: mingw-w64-x86_64-gcc mingw-w64-x86_64-cmake mingw-w64-x86_64-ninja
    
    - name: Generate single header
      run: |
        cd scripts && python generate_single_header.py
    
    - name: Configure CMake (MSVC)
      if: matrix.toolchain == 'msvc'
      run: |
        cmake -B build -G "${{ matrix.generator }}" -DTINCUP_BUILD_TESTS=ON
    
    - name: Configure CMake (MinGW)
      if: matrix.toolchain == 'mingw'
      shell: msys2 {0}
      run: |
        cmake -B build -G "${{ matrix.generator }}" -DTINCUP_BUILD_TESTS=ON
    
    - name: Build (MSVC)
      if: matrix.toolchain == 'msvc'
      run: |
        cmake --build build --config Release
    
    - name: Build (MinGW)
      if: matrix.toolchain == 'mingw'
      shell: msys2 {0}
      run: |
        cmake --build build
    
    - name: Test (MSVC)
      if: matrix.toolchain == 'msvc'
      run: |
        cd build && ctest --output-on-failure -C Release
    
    - name: Test (MinGW)
      if: matrix.toolchain == 'mingw'
      shell: msys2 {0}
      run: |
        cd build && ctest --output-on-failure
